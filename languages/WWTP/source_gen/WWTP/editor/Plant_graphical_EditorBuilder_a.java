package WWTP.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Indent;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.MPSFonts;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import de.itemis.mps.editor.diagram.runtime.jgraph.BaseDiagramECell;
import de.itemis.mps.editor.diagram.runtime.EditorUtil;
import de.itemis.mps.editor.diagram.runtime.jgraph.DiagramCreationContext;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import de.itemis.mps.editor.diagram.runtime.DiagramContext;
import de.itemis.mps.editor.diagram.runtime.ContextVariables;
import de.itemis.mps.editor.diagram.runtime.model.IDiagramAccessor;
import de.itemis.mps.editor.diagram.runtime.model.AbstractDiagramAccessor;
import java.util.List;
import de.itemis.mps.editor.diagram.runtime.model.IDiagramElementAccessor;
import de.itemis.mps.editor.diagram.runtime.model.IAccessorFactory;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import de.itemis.mps.editor.diagram.runtime.shape.IShape;
import de.itemis.mps.editor.diagram.shapes.ArrowHead;
import de.itemis.mps.editor.diagram.runtime.model.AbstractEdgeAccessor;
import de.itemis.mps.editor.diagram.runtime.model.EndpointUtil;
import de.itemis.mps.editor.diagram.runtime.model.IConnectionEndpoint_Internal;
import de.itemis.mps.editor.diagram.runtime.model.IConnectionEndpointReference;
import org.jetbrains.annotations.Nullable;
import java.awt.Color;
import jetbrains.mps.openapi.editor.style.StyleRegistry;
import jetbrains.mps.nodeEditor.MPSColors;
import de.itemis.mps.editor.diagram.runtime.model.IConnectionType;
import java.util.Collections;
import de.itemis.mps.editor.diagram.runtime.model.GeneratedConnectionType;
import de.itemis.mps.editor.diagram.runtime.model.IConnectionEndpoint;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import de.itemis.mps.editor.diagram.runtime.model.DiagramModel;
import de.itemis.mps.editor.diagram.runtime.model.IPaletteEntryProvider;
import de.itemis.mps.editor.diagram.runtime.model.CompositePaletteEntryProvider;
import de.itemis.mps.editor.diagram.runtime.model.SubstituteInfoPaletteEntryProvider;
import de.itemis.mps.editor.diagram.runtime.substitute.SubstituteInfoFactory;
import de.itemis.mps.editor.diagram.runtime.jgraph.SubDiagramECell;
import de.itemis.mps.editor.diagram.runtime.jgraph.RootDiagramECell;
import de.itemis.mps.editor.diagram.runtime.jgraph.RootDCell;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;

/*package*/ class Plant_graphical_EditorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public Plant_graphical_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createCollection_0();
  }

  private EditorCell createCollection_0() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Indent());
    editorCell.setCellId("Collection_yt7qvq_a");
    editorCell.setBig(true);
    setCellContext(editorCell);
    editorCell.addEditorCell(createConstant_0());
    editorCell.addEditorCell(createConstant_1());
    editorCell.addEditorCell(createDiagram_1());
    return editorCell;
  }
  private EditorCell createConstant_0() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "");
    editorCell.setCellId("Constant_yt7qvq_a0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_1() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "Process block diagram");
    editorCell.setCellId("Constant_yt7qvq_b0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE, true);
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.BOLD);
    style.set(StyleAttributes.FONT_SIZE, 16);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createDiagram_0(final EditorContext editorContext, final SNode node) {
    final Wrappers._T<BaseDiagramECell> editorCell = new Wrappers._T<BaseDiagramECell>(null);

    EditorUtil.noCaching(editorContext, new Runnable() {
      public void run() {
        DiagramCreationContext.createDiagram(new _FunctionTypes._void_P0_E0() {
          public void invoke() {
            DiagramContext.withContext(node, new _FunctionTypes._return_P0_E0<BaseDiagramECell>() {
              public BaseDiagramECell invoke() {
                return editorCell.value;
              }
            }, new Runnable() {
              public void run() {
                ContextVariables.withValue("thisNode", node, new Runnable() {
                  public void run() {
                    final ContextVariables _variablesContext = ContextVariables.getCurrent();
                    IDiagramAccessor accessor = new AbstractDiagramAccessor(node) {
                      public List<? extends IDiagramElementAccessor> getElements(IAccessorFactory accessorFactory) {
                        final List<IDiagramElementAccessor> elements = new ArrayList<IDiagramElementAccessor>();
                        for (SNode e : Sequence.fromIterable(new Object() {
                          public Iterable<SNode> query() {
                            return SNodeOperations.ofConcept(SLinkOperations.getChildren(node, LINKS.processes$nJIi), CONCEPTS.Treatment$Cu);
                          }
                        }.query())) {
                          elements.addAll(accessorFactory.fromSNode(e, false));
                        }
                        for (final SNode parameterObject : new Object() {
                          public Iterable<SNode> query() {
                            return SLinkOperations.collectMany(SLinkOperations.getChildren(((SNode) _variablesContext.getValue("thisNode")), LINKS.processes$nJIi), LINKS.water_flows$ZGz8);
                          }
                        }.query()) {
                          ContextVariables.withParentAndValue(_variablesContext, "parameterObject", parameterObject, new Runnable() {
                            public void run() {
                              final ContextVariables _variablesContext = ContextVariables.getCurrent();
                              final EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, parameterObject);
                              editorCell.setCellId("transformedGraphElement_b2a" + "." + ((SNode) _variablesContext.getValue("parameterObject")));


                              final IShape startShape = null;
                              final IShape endShape = new ArrowHead(1, true);
                              AbstractEdgeAccessor accessor = new AbstractEdgeAccessor(EndpointUtil.createAccessorKeyForSNode(((SNode) _variablesContext.getValue("parameterObject")))) {
                                @Override
                                public void writeFrom(IConnectionEndpoint_Internal endpoint) {
                                  writeFrom(EndpointUtil.getSNode(endpoint), EndpointUtil.getPortName(endpoint));
                                }
                                public void writeFrom(final SNode targetNode, final String port) {
                                }
                                @Override
                                public void writeTo(IConnectionEndpoint_Internal endpoint) {
                                  writeTo(EndpointUtil.getSNode(endpoint), EndpointUtil.getPortName(endpoint));
                                }
                                public void writeTo(final SNode targetNode, final String port) {
                                }
                                @Override
                                public IConnectionEndpointReference readFrom() {
                                  return EndpointUtil.createEndpointReferenceForNodeSafe(SNodeOperations.getParent(((SNode) _variablesContext.getValue("parameterObject"))));
                                }
                                @Override
                                public IConnectionEndpointReference readTo() {
                                  return EndpointUtil.createEndpointReferenceForNodeSafe(SLinkOperations.getTarget(((SNode) _variablesContext.getValue("parameterObject")), LINKS.process$2sxT));
                                }
                                @Override
                                public IShape getStartShape() {
                                  return startShape;
                                }
                                @Override
                                public IShape getEndShape() {
                                  return endShape;
                                }
                                @Override
                                public void delete() {
                                }
                                @Nullable
                                public SNode getSNode() {
                                  return parameterObject;
                                }

                              };
                              accessor.setRootCell(editorCell);


                              elements.add(accessor);
                            }
                          });
                        }
                        for (final SNode parameterObject : new Object() {
                          public Iterable<SNode> query() {
                            return SLinkOperations.collectMany(SLinkOperations.getChildren(((SNode) _variablesContext.getValue("thisNode")), LINKS.processes$nJIi), LINKS.sludge_flows$UdVe);
                          }
                        }.query()) {
                          ContextVariables.withParentAndValue(_variablesContext, "parameterObject", parameterObject, new Runnable() {
                            public void run() {
                              final ContextVariables _variablesContext = ContextVariables.getCurrent();
                              final EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, parameterObject);
                              editorCell.setCellId("transformedGraphElement_c2a" + "." + ((SNode) _variablesContext.getValue("parameterObject")));


                              final IShape startShape = null;
                              final IShape endShape = new ArrowHead(1, true);
                              AbstractEdgeAccessor accessor = new AbstractEdgeAccessor(EndpointUtil.createAccessorKeyForSNode(((SNode) _variablesContext.getValue("parameterObject")))) {
                                @Override
                                public void writeFrom(IConnectionEndpoint_Internal endpoint) {
                                  writeFrom(EndpointUtil.getSNode(endpoint), EndpointUtil.getPortName(endpoint));
                                }
                                public void writeFrom(final SNode targetNode, final String port) {
                                }
                                @Override
                                public void writeTo(IConnectionEndpoint_Internal endpoint) {
                                  writeTo(EndpointUtil.getSNode(endpoint), EndpointUtil.getPortName(endpoint));
                                }
                                public void writeTo(final SNode targetNode, final String port) {
                                }
                                @Override
                                public IConnectionEndpointReference readFrom() {
                                  return EndpointUtil.createEndpointReferenceForNodeSafe(SNodeOperations.getParent(((SNode) _variablesContext.getValue("parameterObject"))));
                                }
                                @Override
                                public IConnectionEndpointReference readTo() {
                                  return EndpointUtil.createEndpointReferenceForNodeSafe(SLinkOperations.getTarget(((SNode) _variablesContext.getValue("parameterObject")), LINKS.process$q89q));
                                }
                                @Override
                                public IShape getStartShape() {
                                  return startShape;
                                }
                                @Override
                                public IShape getEndShape() {
                                  return endShape;
                                }
                                @Override
                                public void delete() {
                                }
                                @Nullable
                                public SNode getSNode() {
                                  return parameterObject;
                                }

                              };
                              accessor.setRootCell(editorCell);
                              Style style = new StyleImpl();
                              style.set(StyleAttributes.getInstance().<Color>getAttribute("de.itemis.mps.editor.diagram.styles", "__line-color"), StyleRegistry.getInstance().getSimpleColor(MPSColors.red));
                              accessor.setStyle(style);


                              elements.add(accessor);
                            }
                          });
                        }
                        return elements;
                      }
                      @Override
                      public List<IConnectionType> getConnectionTypes() {
                        List<IConnectionType> connectionTypes = new ArrayList<IConnectionType>();
                        connectionTypes.addAll(Collections.singletonList(new GeneratedConnectionType() {
                          public String getName() {
                            return "new water flow";
                          }
                          @Override
                          public void create(final IConnectionEndpoint from, final IConnectionEndpoint to) {
                            SNode fromNode = SNodeOperations.as(from.getSNode(), CONCEPTS.Treatment$Cu);
                            SNode toNode = SNodeOperations.as(to.getSNode(), CONCEPTS.Treatment$Cu);
                            ListSequence.fromList(SLinkOperations.getChildren(fromNode, LINKS.water_flows$ZGz8)).addElement(createWater_Flow_yt7qvq_a0a2a0a2a(toNode));
                          }

                        }));
                        connectionTypes.addAll(Collections.singletonList(new GeneratedConnectionType() {
                          public String getName() {
                            return "new sludge flow";
                          }
                          @Override
                          public void create(final IConnectionEndpoint from, final IConnectionEndpoint to) {
                            final SNode fromNode = SNodeOperations.cast(from.getSNode(), CONCEPTS.Treatment$Cu);
                            final SNode toNode = SNodeOperations.cast(to.getSNode(), CONCEPTS.Treatment$Cu);
                            final String fromPort = from.getPortName();
                            final String toPort = to.getPortName();

                            ListSequence.fromList(SLinkOperations.getChildren(fromNode, LINKS.sludge_flows$UdVe)).addElement(createSludge_Flow_yt7qvq_a0a0a0b2a(toNode));
                          }
                          @Override
                          public boolean isValidStart(IConnectionEndpoint from) {
                            final SNode fromNode = SNodeOperations.as(from.getSNode(), CONCEPTS.Treatment$Cu);
                            if (fromNode == null) {
                              return false;
                            }
                            final String fromPort = from.getPortName();
                            return true;
                          }
                          @Override
                          public boolean isValidEnd(IConnectionEndpoint to) {
                            final SNode toNode = SNodeOperations.as(to.getSNode(), CONCEPTS.Treatment$Cu);
                            if (toNode == null) {
                              return false;
                            }
                            final String toPort = to.getPortName();
                            return true;
                          }
                        }));
                        return connectionTypes;
                      }

                    };

                    DiagramModel model = DiagramModel.getModel(editorContext, node, "682959282309565034", accessor);

                    IPaletteEntryProvider paletteEntryProvider = new CompositePaletteEntryProvider(new SubstituteInfoPaletteEntryProvider(new SubstituteInfoFactory(editorContext, node).forChildLink(node, SLinkOperations.findLinkDeclaration(LINKS.processes$nJIi))));
                    model.setPaletteEntryProvider(paletteEntryProvider);

                    if (DiagramCreationContext.isSubdiagram()) {
                      editorCell.value = new SubDiagramECell(editorContext, node, model);
                    } else {
                      editorCell.value = new RootDiagramECell(editorContext, node, model);
                    }
                    editorCell.value.setCellId("Diagram_yt7qvq_c0");
                    Style style = new StyleImpl();
                    style.set(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE, true);
                    style.set(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE, true);
                    editorCell.value.getStyle().putAll(style);
                    if (editorCell.value.getContextGraph() != null) {
                      Object defaultParent = editorCell.value.getContextGraph().getDefaultParent();
                      if (defaultParent instanceof RootDCell) {
                        ((RootDCell) defaultParent).resetButtonConfig();
                      }
                    }
                  }
                });
              }
            });
          }
        });
      }
    });

    return editorCell.value;
  }
  private EditorCell createDiagram_1() {
    return createDiagram_0(getEditorContext(), myNode);
  }
  private static SNode createWater_Flow_yt7qvq_a0a2a0a2a(SNode p0) {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.Water_Flow$md);
    n0.setReferenceTarget(LINKS.process$2sxT, p0);
    return n0.getResult();
  }
  private static SNode createSludge_Flow_yt7qvq_a0a0a0b2a(SNode p0) {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.Sludge_Flow$zB);
    n0.setReferenceTarget(LINKS.process$q89q, p0);
    return n0.getResult();
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink processes$nJIi = MetaAdapterFactory.getContainmentLink(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x3071940349ee7875L, 0x3c97f76cf72f67c0L, "processes");
    /*package*/ static final SReferenceLink process$2sxT = MetaAdapterFactory.getReferenceLink(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x7a9dc28334287adfL, 0x7a9dc2833428dd92L, "process");
    /*package*/ static final SContainmentLink water_flows$ZGz8 = MetaAdapterFactory.getContainmentLink(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x3c97f76cf72f67bfL, 0x7a9dc28334287afeL, "water_flows");
    /*package*/ static final SReferenceLink process$q89q = MetaAdapterFactory.getReferenceLink(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x5ddae2cc739086b5L, 0x5ddae2cc739086b6L, "process");
    /*package*/ static final SContainmentLink sludge_flows$UdVe = MetaAdapterFactory.getContainmentLink(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x3c97f76cf72f67bfL, 0x5ddae2cc739d5f66L, "sludge_flows");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Treatment$Cu = MetaAdapterFactory.getConcept(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x3c97f76cf72f67bfL, "WWTP.structure.Treatment");
    /*package*/ static final SConcept Water_Flow$md = MetaAdapterFactory.getConcept(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x7a9dc28334287adfL, "WWTP.structure.Water_Flow");
    /*package*/ static final SConcept Sludge_Flow$zB = MetaAdapterFactory.getConcept(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x5ddae2cc739086b5L, "WWTP.structure.Sludge_Flow");
  }
}
