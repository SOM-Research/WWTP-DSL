package WWTP.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.EnumerationDescriptor;
import jetbrains.mps.smodel.runtime.ConstrainedStringDatatypeDescriptor;
import jetbrains.mps.smodel.runtime.ConstrainedStringDatatypeDescriptorImpl;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAction = createDescriptorForAction();
  /*package*/ final ConceptDescriptor myConceptActuator = createDescriptorForActuator();
  /*package*/ final ConceptDescriptor myConceptActuator_Type = createDescriptorForActuator_Type();
  /*package*/ final ConceptDescriptor myConceptAdaptationRule = createDescriptorForAdaptationRule();
  /*package*/ final ConceptDescriptor myConceptApplication = createDescriptorForApplication();
  /*package*/ final ConceptDescriptor myConceptBio_Reactor = createDescriptorForBio_Reactor();
  /*package*/ final ConceptDescriptor myConceptCloud_Node = createDescriptorForCloud_Node();
  /*package*/ final ConceptDescriptor myConceptCluster = createDescriptorForCluster();
  /*package*/ final ConceptDescriptor myConceptCluster_Reference = createDescriptorForCluster_Reference();
  /*package*/ final ConceptDescriptor myConceptContainer = createDescriptorForContainer();
  /*package*/ final ConceptDescriptor myConceptContainer_Reference = createDescriptorForContainer_Reference();
  /*package*/ final ConceptDescriptor myConceptDecanter = createDescriptorForDecanter();
  /*package*/ final ConceptDescriptor myConceptEdge_Node = createDescriptorForEdge_Node();
  /*package*/ final ConceptDescriptor myConceptExp_ClusterLayer = createDescriptorForExp_ClusterLayer();
  /*package*/ final ConceptDescriptor myConceptExp_Cont = createDescriptorForExp_Cont();
  /*package*/ final ConceptDescriptor myConceptExp_LayerReg = createDescriptorForExp_LayerReg();
  /*package*/ final ConceptDescriptor myConceptExp_Node = createDescriptorForExp_Node();
  /*package*/ final ConceptDescriptor myConceptExp_RegLayer = createDescriptorForExp_RegLayer();
  /*package*/ final ConceptDescriptor myConceptFiltrator = createDescriptorForFiltrator();
  /*package*/ final ConceptDescriptor myConceptFog_Node = createDescriptorForFog_Node();
  /*package*/ final ConceptDescriptor myConceptGrammar = createDescriptorForGrammar();
  /*package*/ final ConceptDescriptor myConceptGrit_Chamber = createDescriptorForGrit_Chamber();
  /*package*/ final ConceptDescriptor myConceptHopper = createDescriptorForHopper();
  /*package*/ final ConceptDescriptor myConceptIoT_Device = createDescriptorForIoT_Device();
  /*package*/ final ConceptDescriptor myConceptIoT_Device_Reference = createDescriptorForIoT_Device_Reference();
  /*package*/ final ConceptDescriptor myConceptIoT_System = createDescriptorForIoT_System();
  /*package*/ final ConceptDescriptor myConceptList_Of_Metrics = createDescriptorForList_Of_Metrics();
  /*package*/ final ConceptDescriptor myConceptMec_Dehydration = createDescriptorForMec_Dehydration();
  /*package*/ final ConceptDescriptor myConceptMetric = createDescriptorForMetric();
  /*package*/ final ConceptDescriptor myConceptNode = createDescriptorForNode();
  /*package*/ final ConceptDescriptor myConceptNode_Reference = createDescriptorForNode_Reference();
  /*package*/ final ConceptDescriptor myConceptNum_Value = createDescriptorForNum_Value();
  /*package*/ final ConceptDescriptor myConceptOffloading = createDescriptorForOffloading();
  /*package*/ final ConceptDescriptor myConceptOperate_Actuator = createDescriptorForOperate_Actuator();
  /*package*/ final ConceptDescriptor myConceptOther_Process = createDescriptorForOther_Process();
  /*package*/ final ConceptDescriptor myConceptPeriod = createDescriptorForPeriod();
  /*package*/ final ConceptDescriptor myConceptPlant = createDescriptorForPlant();
  /*package*/ final ConceptDescriptor myConceptQoS_Event = createDescriptorForQoS_Event();
  /*package*/ final ConceptDescriptor myConceptRedeployment = createDescriptorForRedeployment();
  /*package*/ final ConceptDescriptor myConceptRegion = createDescriptorForRegion();
  /*package*/ final ConceptDescriptor myConceptRegion_Reference = createDescriptorForRegion_Reference();
  /*package*/ final ConceptDescriptor myConceptResource_Expression = createDescriptorForResource_Expression();
  /*package*/ final ConceptDescriptor myConceptRoughing_System = createDescriptorForRoughing_System();
  /*package*/ final ConceptDescriptor myConceptScaling = createDescriptorForScaling();
  /*package*/ final ConceptDescriptor myConceptSensor = createDescriptorForSensor();
  /*package*/ final ConceptDescriptor myConceptSensor_Actuator_Type = createDescriptorForSensor_Actuator_Type();
  /*package*/ final ConceptDescriptor myConceptSensor_Event = createDescriptorForSensor_Event();
  /*package*/ final ConceptDescriptor myConceptSensor_Events = createDescriptorForSensor_Events();
  /*package*/ final ConceptDescriptor myConceptSensor_Type = createDescriptorForSensor_Type();
  /*package*/ final ConceptDescriptor myConceptSludge_Flow = createDescriptorForSludge_Flow();
  /*package*/ final ConceptDescriptor myConceptSludge_Thickener = createDescriptorForSludge_Thickener();
  /*package*/ final ConceptDescriptor myConceptThreshold_Value = createDescriptorForThreshold_Value();
  /*package*/ final ConceptDescriptor myConceptTopic = createDescriptorForTopic();
  /*package*/ final ConceptDescriptor myConceptTreatment = createDescriptorForTreatment();
  /*package*/ final ConceptDescriptor myConceptTreatment_Event = createDescriptorForTreatment_Event();
  /*package*/ final ConceptDescriptor myConceptUltraviolet = createDescriptorForUltraviolet();
  /*package*/ final ConceptDescriptor myConceptVolume = createDescriptorForVolume();
  /*package*/ final ConceptDescriptor myConceptWater_Flow = createDescriptorForWater_Flow();
  /*package*/ final ConceptDescriptor myConceptWorkerReference = createDescriptorForWorkerReference();
  /*package*/ final EnumerationDescriptor myEnumerationConnectivity = new EnumerationDescriptor_Connectivity();
  /*package*/ final EnumerationDescriptor myEnumerationFluid = new EnumerationDescriptor_Fluid();
  /*package*/ final EnumerationDescriptor myEnumerationNode_Presentation = new EnumerationDescriptor_Node_Presentation();
  /*package*/ final EnumerationDescriptor myEnumerationProcessor = new EnumerationDescriptor_Processor();
  /*package*/ final EnumerationDescriptor myEnumerationTime_Unit = new EnumerationDescriptor_Time_Unit();
  /*package*/ final EnumerationDescriptor myEnumerationlayer = new EnumerationDescriptor_layer();
  /*package*/ final ConstrainedStringDatatypeDescriptor myCSDatatypefloat = new ConstrainedStringDatatypeDescriptorImpl(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x3d206768e0fe89b5L, "float", "r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/4404634135717382581", "-?[0-9]*+(\\.[0-9]*)?");
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
    deps.extendedLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage");
    deps.aggregatedLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAction, myConceptActuator, myConceptActuator_Type, myConceptAdaptationRule, myConceptApplication, myConceptBio_Reactor, myConceptCloud_Node, myConceptCluster, myConceptCluster_Reference, myConceptContainer, myConceptContainer_Reference, myConceptDecanter, myConceptEdge_Node, myConceptExp_ClusterLayer, myConceptExp_Cont, myConceptExp_LayerReg, myConceptExp_Node, myConceptExp_RegLayer, myConceptFiltrator, myConceptFog_Node, myConceptGrammar, myConceptGrit_Chamber, myConceptHopper, myConceptIoT_Device, myConceptIoT_Device_Reference, myConceptIoT_System, myConceptList_Of_Metrics, myConceptMec_Dehydration, myConceptMetric, myConceptNode, myConceptNode_Reference, myConceptNum_Value, myConceptOffloading, myConceptOperate_Actuator, myConceptOther_Process, myConceptPeriod, myConceptPlant, myConceptQoS_Event, myConceptRedeployment, myConceptRegion, myConceptRegion_Reference, myConceptResource_Expression, myConceptRoughing_System, myConceptScaling, myConceptSensor, myConceptSensor_Actuator_Type, myConceptSensor_Event, myConceptSensor_Events, myConceptSensor_Type, myConceptSludge_Flow, myConceptSludge_Thickener, myConceptThreshold_Value, myConceptTopic, myConceptTreatment, myConceptTreatment_Event, myConceptUltraviolet, myConceptVolume, myConceptWater_Flow, myConceptWorkerReference);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.Action:
        return myConceptAction;
      case LanguageConceptSwitch.Actuator:
        return myConceptActuator;
      case LanguageConceptSwitch.Actuator_Type:
        return myConceptActuator_Type;
      case LanguageConceptSwitch.AdaptationRule:
        return myConceptAdaptationRule;
      case LanguageConceptSwitch.Application:
        return myConceptApplication;
      case LanguageConceptSwitch.Bio_Reactor:
        return myConceptBio_Reactor;
      case LanguageConceptSwitch.Cloud_Node:
        return myConceptCloud_Node;
      case LanguageConceptSwitch.Cluster:
        return myConceptCluster;
      case LanguageConceptSwitch.Cluster_Reference:
        return myConceptCluster_Reference;
      case LanguageConceptSwitch.Container:
        return myConceptContainer;
      case LanguageConceptSwitch.Container_Reference:
        return myConceptContainer_Reference;
      case LanguageConceptSwitch.Decanter:
        return myConceptDecanter;
      case LanguageConceptSwitch.Edge_Node:
        return myConceptEdge_Node;
      case LanguageConceptSwitch.Exp_ClusterLayer:
        return myConceptExp_ClusterLayer;
      case LanguageConceptSwitch.Exp_Cont:
        return myConceptExp_Cont;
      case LanguageConceptSwitch.Exp_LayerReg:
        return myConceptExp_LayerReg;
      case LanguageConceptSwitch.Exp_Node:
        return myConceptExp_Node;
      case LanguageConceptSwitch.Exp_RegLayer:
        return myConceptExp_RegLayer;
      case LanguageConceptSwitch.Filtrator:
        return myConceptFiltrator;
      case LanguageConceptSwitch.Fog_Node:
        return myConceptFog_Node;
      case LanguageConceptSwitch.Grammar:
        return myConceptGrammar;
      case LanguageConceptSwitch.Grit_Chamber:
        return myConceptGrit_Chamber;
      case LanguageConceptSwitch.Hopper:
        return myConceptHopper;
      case LanguageConceptSwitch.IoT_Device:
        return myConceptIoT_Device;
      case LanguageConceptSwitch.IoT_Device_Reference:
        return myConceptIoT_Device_Reference;
      case LanguageConceptSwitch.IoT_System:
        return myConceptIoT_System;
      case LanguageConceptSwitch.List_Of_Metrics:
        return myConceptList_Of_Metrics;
      case LanguageConceptSwitch.Mec_Dehydration:
        return myConceptMec_Dehydration;
      case LanguageConceptSwitch.Metric:
        return myConceptMetric;
      case LanguageConceptSwitch.Node:
        return myConceptNode;
      case LanguageConceptSwitch.Node_Reference:
        return myConceptNode_Reference;
      case LanguageConceptSwitch.Num_Value:
        return myConceptNum_Value;
      case LanguageConceptSwitch.Offloading:
        return myConceptOffloading;
      case LanguageConceptSwitch.Operate_Actuator:
        return myConceptOperate_Actuator;
      case LanguageConceptSwitch.Other_Process:
        return myConceptOther_Process;
      case LanguageConceptSwitch.Period:
        return myConceptPeriod;
      case LanguageConceptSwitch.Plant:
        return myConceptPlant;
      case LanguageConceptSwitch.QoS_Event:
        return myConceptQoS_Event;
      case LanguageConceptSwitch.Redeployment:
        return myConceptRedeployment;
      case LanguageConceptSwitch.Region:
        return myConceptRegion;
      case LanguageConceptSwitch.Region_Reference:
        return myConceptRegion_Reference;
      case LanguageConceptSwitch.Resource_Expression:
        return myConceptResource_Expression;
      case LanguageConceptSwitch.Roughing_System:
        return myConceptRoughing_System;
      case LanguageConceptSwitch.Scaling:
        return myConceptScaling;
      case LanguageConceptSwitch.Sensor:
        return myConceptSensor;
      case LanguageConceptSwitch.Sensor_Actuator_Type:
        return myConceptSensor_Actuator_Type;
      case LanguageConceptSwitch.Sensor_Event:
        return myConceptSensor_Event;
      case LanguageConceptSwitch.Sensor_Events:
        return myConceptSensor_Events;
      case LanguageConceptSwitch.Sensor_Type:
        return myConceptSensor_Type;
      case LanguageConceptSwitch.Sludge_Flow:
        return myConceptSludge_Flow;
      case LanguageConceptSwitch.Sludge_Thickener:
        return myConceptSludge_Thickener;
      case LanguageConceptSwitch.Threshold_Value:
        return myConceptThreshold_Value;
      case LanguageConceptSwitch.Topic:
        return myConceptTopic;
      case LanguageConceptSwitch.Treatment:
        return myConceptTreatment;
      case LanguageConceptSwitch.Treatment_Event:
        return myConceptTreatment_Event;
      case LanguageConceptSwitch.Ultraviolet:
        return myConceptUltraviolet;
      case LanguageConceptSwitch.Volume:
        return myConceptVolume;
      case LanguageConceptSwitch.Water_Flow:
        return myConceptWater_Flow;
      case LanguageConceptSwitch.WorkerReference:
        return myConceptWorkerReference;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList(myEnumerationConnectivity, myEnumerationFluid, myEnumerationNode_Presentation, myEnumerationProcessor, myEnumerationTime_Unit, myEnumerationlayer, myCSDatatypefloat);
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForAction() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Action", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0xcbb176aba9dbdddL);
    b.class_(false, true, false);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/917352696264900061");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForActuator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Actuator", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6875cbL);
    b.class_(false, false, false);
    b.super_("WWTP.structure.IoT_Device", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c687594L);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/2537808983820367307");
    b.version(2);
    b.associate("type", 0x23381bd32c6875ccL).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6859b6L).optional(false).origin("2537808983820367308").done();
    b.alias("Actuator");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForActuator_Type() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Actuator_Type", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6859b6L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/2537808983820360118");
    b.version(2);
    b.alias("Actuator Type");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAdaptationRule() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "AdaptationRule", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0xcbb176aba26b788L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/917352696257099656");
    b.version(2);
    b.property("allActions", 0x4dd57832eb42989cL).type(PrimitiveTypeId.BOOLEAN).origin("5608521071050528924").done();
    b.property("actionsQuantity", 0x4dd57832eb42989dL).type(PrimitiveTypeId.INTEGER).origin("5608521071050528925").done();
    b.aggregate("actions", 0x4dd57832eb4298a0L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0xcbb176aba9dbdddL).optional(false).ordered(true).multiple(true).origin("5608521071050528928").done();
    b.aggregate("condition", 0x4dd57832eb508e1aL).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("5608521071051443738").done();
    b.aggregate("period", 0x78a15643faf7ec95L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x78a15643faf7e388L).optional(false).ordered(true).multiple(false).origin("8692323605775117461").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForApplication() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Application", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6857a6L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/2537808983820359590");
    b.version(2);
    b.property("imageRepo", 0x330981c29fe0fb05L).type(PrimitiveTypeId.STRING).origin("3677613243630680837").done();
    b.property("cpuRequired", 0x6175b41c53adc177L).type(PrimitiveTypeId.INTEGER).origin("7022717227710136695").done();
    b.property("memoryRequired", 0x6175b41c53adc180L).type(PrimitiveTypeId.INTEGER).origin("7022717227710136704").done();
    b.property("port", 0x624a077add07cc5aL).type(PrimitiveTypeId.INTEGER).origin("7082481588269206618").done();
    b.property("nodePort", 0x624a077add07cc5fL).type(PrimitiveTypeId.INTEGER).origin("7082481588269206623").done();
    b.aggregate("instances", 0x330981c29fe0fb0aL).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x330981c29fe0fb09L).optional(true).ordered(true).multiple(true).origin("3677613243630680842").done();
    b.alias("Application");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBio_Reactor() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Bio_Reactor", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x2f03198298b45365L);
    b.class_(false, false, false);
    b.super_("WWTP.structure.Treatment", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x3c97f76cf72f67bfL);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/3387579393411142501");
    b.version(2);
    b.alias("Bio Reactor");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCloud_Node() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Cloud_Node", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6859a8L);
    b.class_(false, false, false);
    b.super_("WWTP.structure.Node", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c685983L);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/2537808983820360104");
    b.version(2);
    b.alias("Cloud node");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCluster() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Cluster", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6859a9L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/2537808983820360105");
    b.version(2);
    b.associate("master", 0x6175b41c53adc1a0L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c685983L).optional(false).origin("7022717227710136736").done();
    b.aggregate("workers", 0x6175b41c53adc1a9L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x6175b41c53adc1a5L).optional(false).ordered(true).multiple(true).origin("7022717227710136745").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCluster_Reference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Cluster_Reference", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x11dabaab0c63700aL);
    b.class_(false, false, false);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/1286545887377715210");
    b.version(2);
    b.associate("cluster", 0x11dabaab0c63700bL).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6859a9L).optional(false).origin("1286545887377715211").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForContainer() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Container", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x330981c29fe0fb09L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/3677613243630680841");
    b.version(2);
    b.property("cpuLimit", 0x78a11bdb8b481cbeL).type(PrimitiveTypeId.INTEGER).origin("8692259385550314686").done();
    b.property("memoryLimit", 0x78a11bdb8b481cc0L).type(PrimitiveTypeId.INTEGER).origin("8692259385550314688").done();
    b.associate("application", 0x6175b41c53adc198L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6857a6L).optional(false).origin("7022717227710136728").done();
    b.aggregate("topics", 0x624a077add31889fL).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x624a077add07cc36L).optional(true).ordered(true).multiple(true).origin("7082481588271941791").done();
    b.aggregate("volumes", 0x1df32ba8689de009L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x1df32ba8689ddf66L).optional(true).ordered(true).multiple(true).origin("2158116648750276617").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForContainer_Reference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Container_Reference", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x624a077add314f9fL);
    b.class_(false, false, false);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/7082481588271927199");
    b.version(2);
    b.associate("container", 0x624a077add314fa0L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x330981c29fe0fb09L).optional(false).origin("7082481588271927200").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDecanter() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Decanter", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x2f03198297dca07bL);
    b.class_(false, false, false);
    b.super_("WWTP.structure.Treatment", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x3c97f76cf72f67bfL);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/3387579393397006459");
    b.version(2);
    b.alias("Decanter");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEdge_Node() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Edge_Node", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6859a6L);
    b.class_(false, false, false);
    b.super_("WWTP.structure.Node", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c685983L);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/2537808983820360102");
    b.version(2);
    b.aggregate("regions", 0x424863e2f369361dL).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x424863e2f3693460L).optional(true).ordered(true).multiple(true).origin("4776177231223928349").done();
    b.alias("Edge node");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExp_ClusterLayer() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Exp_ClusterLayer", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x5306924001b2832bL);
    b.class_(false, false, false);
    b.super_("WWTP.structure.Resource_Expression", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x5306924001a481deL);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/5982629958612321067");
    b.version(2);
    b.property("layer", 0x5306924001b2832cL).type(MetaIdFactory.dataTypeId(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x53069240019d60c8L)).origin("5982629958612321068").done();
    b.property("quantity", 0x5306924001d611c6L).type(PrimitiveTypeId.STRING).origin("5982629958614651334").done();
    b.associate("cluster", 0x5306924001b2832eL).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6859a9L).optional(false).origin("5982629958612321070").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExp_Cont() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Exp_Cont", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x12549f92e660b9ceL);
    b.class_(false, false, false);
    b.super_("WWTP.structure.Resource_Expression", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x5306924001a481deL);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/1320856044005538254");
    b.version(2);
    b.associate("container", 0x12549f92e660b9cfL).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x330981c29fe0fb09L).optional(false).origin("1320856044005538255").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExp_LayerReg() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Exp_LayerReg", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x12549f92e66c4868L);
    b.class_(false, false, false);
    b.super_("WWTP.structure.Resource_Expression", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x5306924001a481deL);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/1320856044006295656");
    b.version(2);
    b.property("layer", 0x12549f92e66c4875L).type(MetaIdFactory.dataTypeId(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x53069240019d60c8L)).origin("1320856044006295669").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExp_Node() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Exp_Node", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x5306924001c7aec1L);
    b.class_(false, false, false);
    b.super_("WWTP.structure.Resource_Expression", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x5306924001a481deL);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/5982629958613708481");
    b.version(2);
    b.associate("node", 0x5306924001c7aec2L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c685983L).optional(false).origin("5982629958613708482").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExp_RegLayer() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Exp_RegLayer", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0xcbb176ababbb082L);
    b.class_(false, false, false);
    b.super_("WWTP.structure.Resource_Expression", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x5306924001a481deL);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/917352696266862722");
    b.version(2);
    b.property("layer", 0x5306924001ab7d87L).type(MetaIdFactory.dataTypeId(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x53069240019d60c8L)).origin("5982629958611860871").done();
    b.property("quantity", 0x5306924001d611c9L).type(PrimitiveTypeId.STRING).origin("5982629958614651337").done();
    b.associate("region", 0x5306924001454deaL).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x6175b41c53adc15cL).optional(false).origin("5982629958605164010").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFiltrator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Filtrator", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x2f03198298e88fe1L);
    b.class_(false, false, false);
    b.super_("WWTP.structure.Treatment", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x3c97f76cf72f67bfL);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/3387579393414565857");
    b.version(2);
    b.alias("Filtrator");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFog_Node() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Fog_Node", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6859a7L);
    b.class_(false, false, false);
    b.super_("WWTP.structure.Node", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c685983L);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/2537808983820360103");
    b.version(2);
    b.aggregate("regions", 0x4dd57832ebff89e7L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x424863e2f3693460L).optional(true).ordered(true).multiple(true).origin("5608521071062911463").done();
    b.alias("Fog node");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGrammar() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Grammar", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x530692400145291eL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/5982629958605154590");
    b.version(2);
    b.property("value", 0x530692400145291fL).type(PrimitiveTypeId.STRING).origin("5982629958605154591").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGrit_Chamber() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Grit_Chamber", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x2f03198298e88fe4L);
    b.class_(false, false, false);
    b.super_("WWTP.structure.Treatment", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x3c97f76cf72f67bfL);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/3387579393414565860");
    b.version(2);
    b.alias("Grit Chamber");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForHopper() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Hopper", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x2f0319829866568bL);
    b.class_(false, false, false);
    b.super_("WWTP.structure.Treatment", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x3c97f76cf72f67bfL);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/3387579393406031499");
    b.version(2);
    b.alias("Hopper");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIoT_Device() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "IoT_Device", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c687594L);
    b.class_(false, true, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/2537808983820367252");
    b.version(2);
    b.property("brand", 0x23381bd32c6875bfL).type(PrimitiveTypeId.STRING).origin("2537808983820367295").done();
    b.property("communication", 0x23381bd32c6875baL).type(MetaIdFactory.dataTypeId(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c687595L)).origin("2537808983820367290").done();
    b.property("latitude", 0x4dd57832ebc1dc98L).type(PrimitiveTypeId.STRING).origin("5608521071058869400").done();
    b.property("longitude", 0x4dd57832ebc1dc9dL).type(PrimitiveTypeId.STRING).origin("5608521071058869405").done();
    b.associate("gateway", 0x6175b41c53adc1bdL).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6859a6L).optional(true).origin("7022717227710136765").done();
    b.associate("topic", 0x624a077add4a2aabL).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x624a077add07cc36L).optional(false).origin("7082481588273556139").done();
    b.aggregate("regions", 0x6a28ca9e36a4d858L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x424863e2f3693460L).optional(true).ordered(true).multiple(true).origin("7649586747959203928").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIoT_Device_Reference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "IoT_Device_Reference", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x13065eed5f79955cL);
    b.class_(false, false, false);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/1370887510182958428");
    b.version(2);
    b.associate("iot_device", 0x13065eed5f79955dL).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c687594L).optional(false).origin("1370887510182958429").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIoT_System() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "IoT_System", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6857a2L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/2537808983820359586");
    b.version(2);
    b.aggregate("clusters", 0x23381bd32c6859aaL).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6859a9L).optional(true).ordered(true).multiple(true).origin("2537808983820360106").done();
    b.aggregate("regions", 0x6175b41c53adc19aL).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x6175b41c53adc15cL).optional(true).ordered(true).multiple(true).origin("7022717227710136730").done();
    b.aggregate("IoTDevices", 0x6175b41c53adc0f4L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c687594L).optional(true).ordered(true).multiple(true).origin("7022717227710136564").done();
    b.aggregate("nodes", 0x6175b41c53adc0efL).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c685983L).optional(true).ordered(true).multiple(true).origin("7022717227710136559").done();
    b.aggregate("applications", 0x6175b41c53adc16fL).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6857a6L).optional(true).ordered(true).multiple(true).origin("7022717227710136687").done();
    b.aggregate("adaptationRules", 0xcbb176aba26bb98L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0xcbb176aba26b788L).optional(true).ordered(true).multiple(true).origin("917352696257100696").done();
    b.aggregate("brokers", 0x624a077add2d4eb9L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x624a077add314f9fL).optional(true).ordered(true).multiple(true).origin("7082481588271664825").done();
    b.aggregate("wwtp", 0x6e66c4c32b2d666eL).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x3071940349ee7875L).optional(false).ordered(true).multiple(false).origin("7955262134318622318").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForList_Of_Metrics() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "List_Of_Metrics", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0xcbb176abaac8ce9L);
    b.class_(false, false, true);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/917352696265870569");
    b.version(2);
    b.aggregate("metric", 0xcbb176abaac8ceaL).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0xcbb176abaac8cedL).optional(true).ordered(true).multiple(true).origin("917352696265870570").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMec_Dehydration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Mec_Dehydration", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x2f03198298b466deL);
    b.class_(false, false, false);
    b.super_("WWTP.structure.Treatment", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x3c97f76cf72f67bfL);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/3387579393411147486");
    b.version(2);
    b.alias("Mec Dehydration");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMetric() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Metric", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0xcbb176abaac8cedL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/917352696265870573");
    b.version(2);
    b.property("label", 0x12549f92e6604947L).type(PrimitiveTypeId.STRING).origin("1320856044005509447").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNode() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Node", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c685983L);
    b.class_(false, true, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/2537808983820360067");
    b.version(2);
    b.property("ipAddress", 0x23381bd32c685986L).type(PrimitiveTypeId.STRING).origin("2537808983820360070").done();
    b.property("oS", 0x23381bd32c685988L).type(PrimitiveTypeId.STRING).origin("2537808983820360072").done();
    b.property("cpuCores", 0x23381bd32c68598bL).type(PrimitiveTypeId.INTEGER).origin("2537808983820360075").done();
    b.property("memory", 0x23381bd32c68598fL).type(PrimitiveTypeId.INTEGER).origin("2537808983820360079").done();
    b.property("storage", 0x23381bd32c685994L).type(PrimitiveTypeId.INTEGER).origin("2537808983820360084").done();
    b.property("processor", 0x23381bd32c68599aL).type(MetaIdFactory.dataTypeId(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6859a1L)).origin("2537808983820360090").done();
    b.aggregate("containers", 0x6175b41c53adc168L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x330981c29fe0fb09L).optional(true).ordered(true).multiple(true).origin("7022717227710136680").done();
    b.aggregate("linkedNodes", 0x4dd57832ebdf576bL).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x11dabaab0c637009L).optional(true).ordered(true).multiple(true).origin("5608521071060801387").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNode_Reference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Node_Reference", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x11dabaab0c637009L);
    b.class_(false, false, false);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/1286545887377715209");
    b.version(2);
    b.associate("node", 0x11dabaab0c63700dL).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c685983L).optional(false).origin("1286545887377715213").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNum_Value() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Num_Value", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x1edc553a9815ad11L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/2223746026162203921");
    b.version(2);
    b.property("unit", 0x1edc553a9815ad12L).type(PrimitiveTypeId.STRING).origin("2223746026162203922").done();
    b.property("value", 0x1edc553a9815ad24L).type(MetaIdFactory.dataTypeId(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x3d206768e0fe89b5L)).origin("2223746026162203940").done();
    b.alias("Numerical value");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOffloading() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Offloading", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x250b6e3f27339aeL);
    b.class_(false, false, false);
    b.super_("WWTP.structure.Action", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0xcbb176aba9dbdddL);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/166834276354177454");
    b.version(2);
    b.associate("container", 0x250b6e3f27339c0L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x330981c29fe0fb09L).optional(false).origin("166834276354177472").done();
    b.aggregate("targetNode", 0x11dabaab0c637016L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x11dabaab0c637009L).optional(true).ordered(true).multiple(true).origin("1286545887377715222").done();
    b.aggregate("targetRegion", 0x11dabaab0c637020L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x424863e2f3693460L).optional(true).ordered(true).multiple(true).origin("1286545887377715232").done();
    b.aggregate("targetCluster", 0x11dabaab0c637026L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x11dabaab0c63700aL).optional(true).ordered(true).multiple(true).origin("1286545887377715238").done();
    b.alias("Offloading");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOperate_Actuator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Operate_Actuator", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0xde8316f4b5dd34dL);
    b.class_(false, false, false);
    b.super_("WWTP.structure.Action", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0xcbb176aba9dbdddL);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/1002105271165506381");
    b.version(2);
    b.property("message", 0xde8316f4b5efdfbL).type(PrimitiveTypeId.STRING).origin("1002105271165582843").done();
    b.associate("device", 0xde8316f4b5e23d2L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6875cbL).optional(false).origin("1002105271165526994").done();
    b.alias("Operate Actuator");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOther_Process() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Other_Process", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x2f03198298e88fe5L);
    b.class_(false, false, false);
    b.super_("WWTP.structure.Treatment", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x3c97f76cf72f67bfL);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/3387579393414565861");
    b.version(2);
    b.property("trName", 0x2f03198298e8a604L).type(PrimitiveTypeId.STRING).origin("3387579393414571524").done();
    b.alias("Other Process");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPeriod() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Period", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x78a15643faf7e388L);
    b.class_(false, false, false);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/8692323605775115144");
    b.version(2);
    b.property("value", 0x78a15643faf7e389L).type(PrimitiveTypeId.INTEGER).origin("8692323605775115145").done();
    b.property("unit", 0x78a15643faf7e38bL).type(MetaIdFactory.dataTypeId(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x78a15643faf7e38eL)).origin("8692323605775115147").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPlant() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Plant", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x3071940349ee7875L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/3490733928035022965");
    b.version(2);
    b.aggregate("treatments", 0x3c97f76cf72f67c0L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x3c97f76cf72f67bfL).optional(true).ordered(true).multiple(true).origin("4366230411134592960").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForQoS_Event() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "QoS_Event", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0xcbb176aba3d9f94L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2f16f1b357e19f43L);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/917352696258600852");
    b.version(2);
    b.property("layer", 0x53069240019d60c5L).type(MetaIdFactory.dataTypeId(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x53069240019d60c8L)).origin("5982629958610936005").done();
    b.associate("metric", 0xcbb176aba5bcfdcL).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0xcbb176abaac8cedL).optional(false).origin("917352696260579292").done();
    b.aggregate("expr", 0x5306924001a481e3L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x5306924001a481deL).optional(false).ordered(true).multiple(false).origin("5982629958611403235").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRedeployment() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Redeployment", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x11dabaab0c6371b7L);
    b.class_(false, false, false);
    b.super_("WWTP.structure.Action", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0xcbb176aba9dbdddL);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/1286545887377715639");
    b.version(2);
    b.associate("container", 0x11dabaab0c6371baL).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x330981c29fe0fb09L).optional(false).origin("1286545887377715642").done();
    b.alias("Redeployment");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRegion() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Region", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x6175b41c53adc15cL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/7022717227710136668");
    b.version(2);
    b.aggregate("subregions", 0x6175b41c53adc161L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x6175b41c53adc15cL).optional(true).ordered(true).multiple(true).origin("7022717227710136673").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRegion_Reference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Region_Reference", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x424863e2f3693460L);
    b.class_(false, false, false);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/4776177231223927904");
    b.version(2);
    b.associate("region", 0x424863e2f369352dL).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x6175b41c53adc15cL).optional(false).origin("4776177231223928109").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForResource_Expression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Resource_Expression", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x5306924001a481deL);
    b.class_(false, true, false);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/5982629958611403230");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRoughing_System() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Roughing_System", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x2f03198298e88fdfL);
    b.class_(false, false, false);
    b.super_("WWTP.structure.Treatment", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x3c97f76cf72f67bfL);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/3387579393414565855");
    b.version(2);
    b.alias("Roughing System");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForScaling() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Scaling", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x11dabaab0c637001L);
    b.class_(false, false, false);
    b.super_("WWTP.structure.Action", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0xcbb176aba9dbdddL);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/1286545887377715201");
    b.version(2);
    b.property("instances", 0x11dabaab0c637002L).type(PrimitiveTypeId.INTEGER).origin("1286545887377715202").done();
    b.associate("application", 0x11dabaab0c637004L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6857a6L).optional(false).origin("1286545887377715204").done();
    b.aggregate("targetNodes", 0x11dabaab0c637109L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x11dabaab0c637009L).optional(true).ordered(true).multiple(true).origin("1286545887377715465").done();
    b.aggregate("targetRegion", 0x11dabaab0c63710cL).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x424863e2f3693460L).optional(true).ordered(true).multiple(true).origin("1286545887377715468").done();
    b.aggregate("targetCluster", 0x11dabaab0c637110L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x11dabaab0c63700aL).optional(true).ordered(true).multiple(true).origin("1286545887377715472").done();
    b.alias("Scaling");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSensor() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Sensor", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6875c5L);
    b.class_(false, false, false);
    b.super_("WWTP.structure.IoT_Device", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c687594L);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/2537808983820367301");
    b.version(2);
    b.property("unit", 0x65ae998d2a1ca237L).type(PrimitiveTypeId.STRING).origin("7326962475354333751").done();
    b.property("threshold", 0x12549f92e677d435L).type(MetaIdFactory.dataTypeId(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x3d206768e0fe89b5L)).origin("1320856044007052341").done();
    b.associate("type", 0x23381bd32c6875c8L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6859b3L).optional(false).origin("2537808983820367304").done();
    b.alias("Sensor");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSensor_Actuator_Type() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Sensor_Actuator_Type", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6859b0L);
    b.class_(false, false, true);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/2537808983820360112");
    b.version(2);
    b.aggregate("sensorVariables", 0x23381bd32c6859b1L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6859b3L).optional(true).ordered(true).multiple(true).origin("2537808983820360113").done();
    b.aggregate("actuatorTypes", 0x23381bd32c6859b9L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6859b6L).optional(true).ordered(true).multiple(true).origin("2537808983820360121").done();
    b.alias("Sensors And Actuator Types");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSensor_Event() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Sensor_Event", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0xcbb176abacfab9fL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2f16f1b357e19f43L);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/917352696268172191");
    b.version(2);
    b.associate("sensor", 0xcbb176abacfaba0L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6875c5L).optional(false).origin("917352696268172192").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSensor_Events() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Sensor_Events", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x53069240016af7c7L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2f16f1b357e19f43L);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/5982629958607632327");
    b.version(2);
    b.property("quantity", 0x5306924001cee435L).type(PrimitiveTypeId.STRING).origin("5982629958614180917").done();
    b.associate("region", 0x53069240016af7caL).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x6175b41c53adc15cL).optional(false).origin("5982629958607632330").done();
    b.associate("sensorType", 0x530692400188716fL).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6859b3L).optional(false).origin("5982629958609564015").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSensor_Type() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Sensor_Type", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6859b3L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/2537808983820360115");
    b.version(2);
    b.alias("Variable");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSludge_Flow() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Sludge_Flow", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x5ddae2cc739086b5L);
    b.class_(false, false, false);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/6762967158190278325");
    b.version(2);
    b.associate("process", 0x5ddae2cc739086b6L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x3c97f76cf72f67bfL).optional(false).origin("6762967158190278326").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSludge_Thickener() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Sludge_Thickener", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x2f03198298e88fe3L);
    b.class_(false, false, false);
    b.super_("WWTP.structure.Treatment", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x3c97f76cf72f67bfL);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/3387579393414565859");
    b.version(2);
    b.alias("Thickener");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForThreshold_Value() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Threshold_Value", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x12549f92e66c48e4L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/1320856044006295780");
    b.version(2);
    b.alias("Threshold value");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTopic() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Topic", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x624a077add07cc36L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/7082481588269206582");
    b.version(2);
    b.alias("topic");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTreatment() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Treatment", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x3c97f76cf72f67bfL);
    b.class_(false, true, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/4366230411134592959");
    b.version(2);
    b.property("fluid", 0x2f0319829804bd58L).type(MetaIdFactory.dataTypeId(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x2f0319829804bd53L)).origin("3387579393399635288").done();
    b.aggregate("water_flows", 0x7a9dc28334287afeL).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x7a9dc28334287adfL).optional(true).ordered(true).multiple(true).origin("8835431912742353662").done();
    b.aggregate("sludge_flows", 0x5ddae2cc739d5f66L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x5ddae2cc739086b5L).optional(true).ordered(true).multiple(true).origin("6762967158191120230").done();
    b.aggregate("iot_devices", 0x13065eed5f799554L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c687594L).optional(true).ordered(true).multiple(true).origin("1370887510182958420").done();
    b.aggregate("regions", 0x6e66c4c32a453bfcL).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x424863e2f3693460L).optional(true).ordered(true).multiple(true).origin("7955262134303407100").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTreatment_Event() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Treatment_Event", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x313eff4551584394L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2f16f1b357e19f43L);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/3548554229597094804");
    b.version(2);
    b.associate("treatment", 0x313eff4551584397L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x3c97f76cf72f67bfL).optional(false).origin("3548554229597094807").done();
    b.associate("sensorType", 0x313eff4551584399L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6859b3L).optional(false).origin("3548554229597094809").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUltraviolet() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Ultraviolet", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x2f03198298e88fe2L);
    b.class_(false, false, false);
    b.super_("WWTP.structure.Treatment", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x3c97f76cf72f67bfL);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/3387579393414565858");
    b.version(2);
    b.alias("Ultraviolet");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForVolume() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Volume", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x1df32ba8689ddf66L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/2158116648750276454");
    b.version(2);
    b.property("mountPath", 0x1df32ba8689ddf6bL).type(PrimitiveTypeId.STRING).origin("2158116648750276459").done();
    b.property("subPath", 0x1df32ba8689ddf6dL).type(PrimitiveTypeId.STRING).origin("2158116648750276461").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForWater_Flow() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "Water_Flow", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x7a9dc28334287adfL);
    b.class_(false, false, false);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/8835431912742353631");
    b.version(2);
    b.associate("process", 0x7a9dc2833428dd92L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x3c97f76cf72f67bfL).optional(false).origin("8835431912742378898").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForWorkerReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WWTP", "WorkerReference", 0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x6175b41c53adc1a5L);
    b.class_(false, false, false);
    b.origin("r:589c5fd8-b628-4aae-9e87-31a99b5068a7(WWTP.structure)/7022717227710136741");
    b.version(2);
    b.associate("worker", 0x6175b41c53adc1a6L).target(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c685983L).optional(false).origin("7022717227710136742").done();
    return b.create();
  }
}
